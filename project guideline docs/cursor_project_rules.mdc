---
description: Updated project rules and best practices for VivyStart6 React Native + Supabase app
globs:
alwaysApply: false
---
# Project Rules and Best Practices (Updated April 2025)

## 1. Code Quality Standards

### Naming Conventions
- Use **PascalCase** for components: `ShotsScreen`, `TimePickerWheel`
- Use **camelCase** for variables/functions: `handleAddShot`, `fetchShots`
- Use **UPPER_SNAKE_CASE** for constants: `API_URL`, `DEFAULT_TIME`
- Prefix interfaces with `I`: `IShot`, `IWeightLog`

### Code Structure
- One component per file (max 300 lines per file)
- Functions should not exceed 30 lines
- Use atomic design for components (atoms, molecules, organisms)
- Keep business logic out of UI components (use hooks)

### TypeScript Usage
- Strict mode enabled, no `any` types
- All props/interfaces/types must be documented
- Use type imports/exports
- Prefer interfaces over types for objects

## 2. Development Workflow

### Git Workflow
- Use feature branches: `feature/short-description`
- Commit messages: `type(scope): message` (feat, fix, docs, style, refactor, test, chore)
- Squash commits before merging
- Require code review for all PRs
- Pull request template required

### Code Review Guidelines
- Max 400 lines per review
- Review within 24 hours
- Enforce linting and Prettier formatting
- Check for test coverage and TypeScript errors

### Testing Requirements
- Unit tests for all components and hooks
- Integration tests for feature flows (shots, weight, side effects)
- Minimum 80% coverage
- Test all error and edge cases
- Mock Supabase and external APIs in tests

## 3. Architecture Rules

### Component Structure
- Follow atomic design principles
- Use hooks for state and side effects
- Implement error boundaries where needed
- Keep components pure and single-responsibility
- Use optimistic UI for data mutations (update UI before server confirms)
- Real-time sync via Supabase subscriptions

### State Management
- Local state for UI logic
- Context/hooks for shared state (user, theme, health data)
- No Redux or MobX (unless scaling requires it)

## 4. Documentation
- All public components and functions must have JSDoc comments
- Update guideline docs with every major feature or architecture change

---
*These rules ensure maintainability, scalability, and a consistent developer experience for the VivyStart6 health tracking app.*