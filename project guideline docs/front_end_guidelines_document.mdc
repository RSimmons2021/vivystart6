---
description: Updated front-end guidelines for VivyStart6 React Native + Supabase app
globs: 
alwaysApply: false
---
# Front-end Development Guidelines (Updated April 2025)

## Code Organization

### Component Structure
```
components/
  common/     # Reusable UI components (Button, Card, etc.)
  features/   # Feature-specific components (Shots, Weight, SideEffects, etc.)
  layouts/    # Layout components (Screen wrappers, SafeArea)
  screens/    # Tab or page-level screens (ShotsScreen, CoachScreen, etc.)
```
- Each component in its own file (TypeScript, .tsx)
- Use hooks for state/effects
- Keep business logic out of UI (use hooks)

### Styling Guidelines
- Use StyleSheet.create for all styles
- Follow atomic design (atoms, molecules, organisms)
- Consistent color scheme and spacing
- Theme support via context/store
- Use scalable units (rem, % where possible)
- Accessible color contrast

## Component Guidelines

### Best Practices
1. Use functional components with hooks
2. Strict TypeScript typing for all props and state
3. Modular, reusable components
4. Implement error boundaries for critical screens
5. Optimize re-renders with useMemo and useCallback
6. Use context for global state (theme, user, health data)
7. Prefer optimistic UI updates for fast feedback
8. Use custom pickers (e.g., TimePickerWheel) for better UX
9. Integrate real-time updates with Supabase subscriptions
10. Document all public components with JSDoc

### Component Template
```typescript
import React from 'react';
import { View, StyleSheet } from 'react-native';

interface ComponentProps {
  // Props definition
}

export const Component: React.FC<ComponentProps> = ({ ...props }) => {
  // State and hooks
  // Event handlers
  // Render
  return <View />;
};

const styles = StyleSheet.create({
  // ...styles
});
```

## Feature Flows
- **Shots:** Calendar, add/edit/delete, time/location/medication, real-time sync
- **Weight:** Daily log, trends, real-time sync
- **Side Effects:** Log, review, delete, real-time sync
- **Coach:** AI chat, weight log, advice
- **Progress:** Charts for weight, shots, goals

## Testing & Linting
- All components and hooks must have tests
- Use Prettier and ESLint (strict rules)
- No `any` types allowed
- 80%+ test coverage required

---
*These guidelines ensure a scalable, maintainable, and modern front-end for VivyStart6.*